# coding: utf-8

"""
    Mail API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Headers(BaseModel):
    """
    Headers
    """ # noqa: E501
    content_type: Optional[List[StrictStr]] = Field(default=None, alias="Content-Type")
    var_date: Optional[List[StrictStr]] = Field(default=None, alias="Date")
    var_from: Optional[List[StrictStr]] = Field(default=None, alias="From")
    mime_version: Optional[List[StrictStr]] = Field(default=None, alias="MIME-Version")
    message_id: Optional[List[StrictStr]] = Field(default=None, alias="Message-Id")
    received: Optional[List[StrictStr]] = Field(default=None, alias="Received")
    reply_to: Optional[List[StrictStr]] = Field(default=None, alias="Reply-To")
    return_path: Optional[List[StrictStr]] = Field(default=None, alias="Return-Path")
    subject: Optional[List[StrictStr]] = Field(default=None, alias="Subject")
    to: Optional[List[StrictStr]] = Field(default=None, alias="To")
    __properties: ClassVar[List[str]] = ["Content-Type", "Date", "From", "MIME-Version", "Message-Id", "Received", "Reply-To", "Return-Path", "Subject", "To"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Headers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Headers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Content-Type": obj.get("Content-Type"),
            "Date": obj.get("Date"),
            "From": obj.get("From"),
            "MIME-Version": obj.get("MIME-Version"),
            "Message-Id": obj.get("Message-Id"),
            "Received": obj.get("Received"),
            "Reply-To": obj.get("Reply-To"),
            "Return-Path": obj.get("Return-Path"),
            "Subject": obj.get("Subject"),
            "To": obj.get("To")
        })
        return _obj
